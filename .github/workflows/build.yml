name: DriftFX Build

on: [push]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Prepare
      run: sudo apt-get install -y mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev
    - uses: actions/checkout@v1
    - name: Configure Build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -G "Unix Makefiles" ../native
    - name: Build
      run: |
        cd build
        cmake --build .
    - name: Prepare artifacts
      run: |
        mkdir artifacts
        cp build/DriftFX/libdriftfx.so artifacts
        cp build/DriftFX/libdriftfx.so.debug atrifacts
        cp build/samples/libsamples.so artifacts
        cp build/samples/libsamples.so.debug artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: natives
        path: artifacts

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: Configure Build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -G "Unix Makefiles" ../native
    - name: Build
      run: |
        cd build
        cmake --build .
    - name: Prepare artifacts
      run: |
        mkdir artifacts
        cp build/DriftFX/libdriftfx.dylib artifacts
        cp -r build/DriftFX/libdriftfx.dylib.dSYM artifacts
        cp build/samples/libsamples.dylib artifacts
        cp -r build/samples/libsamples.dylib.dSYM artifacts
    - name: Upload atrifacts
      uses: actions/upload-artifact@v1
      with:
        name: natives
        path: artifacts

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Configure Build
      run: |
        mkdir build
        cd build
        cmake -G "Visual Studio 16 2019" ../native
    - name: Build
      run: |
        cd build
        cmake --build . --config RelWithDebInfo
    - name: Prepare artifacts
      run: |
        mkdir artifacts
        cp build/DriftFX/RelWithDebInfo/driftfx.dll artifacts
        cp build/DriftFX/RelWithDebInfo/driftfx.lib artifacts
        cp build/DriftFX/RelWithDebInfo/driftfx.pdb artifacts
        cp build/samples/RelWithDebInfo/samples.dll artifacts
        cp build/samples/RelWithDebInfo/samples.lib artifacts
        cp build/samples/RelWithDebInfo/samples.pdb artifacts
    - name: Upload atrifacts
      uses: actions/upload-artifact@v1
      with:
        name: natives
        path: artifacts

  build-maven:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Download Natives
      uses: actions/download-artifact@v1
      with:
        name: natives
        path: natives
    - name: Prepare natives for build
      run: |
        mkdir org.eclipse.fx.drift/native || rm org.eclipse.fx.drift/native/*
        cp natives/libdriftfx.so org.eclipse.fx.drift/native/
        cp natives/libdriftfx.dylib org.eclipse.fx.drift/native/
        cp natives/driftfx.dll org.eclipse.fx.drift/native/
        mkdir org.eclipse.fx.drift.samples/native || rm org.eclipse.fx.drift.samples/native/*
        cp natives/libsamples.so org.eclipse.fx.drift.samples/native/
        cp natives/libsamples.dylib org.eclipse.fx.drift.samples/native/
        cp natives/samples.dll org.eclipse.fx.drift.samples/native/
        ls -al org.eclipse.fx.drift/native
        ls -al org.eclipse.fx.drift.samples/native
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        java-package: jdk+fx
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Prepare dist
      run: |
        mkdir dist
        echo $GITHUB_SHA > dist/git_commit
        mkdir dist/include
        cp -r native/DriftFX/include/* dist/include/
        mkdir dist/libs
        cp -r natives/* dist/libs&
        zip -r dist.zip dist/*
    - name: Upload Dist
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist
  release:
    runs-on: ubuntu-latest
    needs: [build-maven]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Create Release
      run: echo "Doing Release"
  i-build:
    runs-on: ubuntu-latest
    needs: [build-maven]
    if: startsWith(github.ref, 'refs/tags/I-')
    steps:
    - name: Create Integration Build
      run: echo "Doing I-Build"
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: 

